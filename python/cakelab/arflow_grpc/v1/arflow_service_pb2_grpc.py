# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cakelab.arflow_grpc.v1 import create_session_request_pb2 as cakelab_dot_arflow__grpc_dot_v1_dot_create__session__request__pb2
from cakelab.arflow_grpc.v1 import create_session_response_pb2 as cakelab_dot_arflow__grpc_dot_v1_dot_create__session__response__pb2
from cakelab.arflow_grpc.v1 import delete_session_request_pb2 as cakelab_dot_arflow__grpc_dot_v1_dot_delete__session__request__pb2
from cakelab.arflow_grpc.v1 import delete_session_response_pb2 as cakelab_dot_arflow__grpc_dot_v1_dot_delete__session__response__pb2
from cakelab.arflow_grpc.v1 import get_session_request_pb2 as cakelab_dot_arflow__grpc_dot_v1_dot_get__session__request__pb2
from cakelab.arflow_grpc.v1 import get_session_response_pb2 as cakelab_dot_arflow__grpc_dot_v1_dot_get__session__response__pb2
from cakelab.arflow_grpc.v1 import join_session_request_pb2 as cakelab_dot_arflow__grpc_dot_v1_dot_join__session__request__pb2
from cakelab.arflow_grpc.v1 import join_session_response_pb2 as cakelab_dot_arflow__grpc_dot_v1_dot_join__session__response__pb2
from cakelab.arflow_grpc.v1 import leave_session_request_pb2 as cakelab_dot_arflow__grpc_dot_v1_dot_leave__session__request__pb2
from cakelab.arflow_grpc.v1 import leave_session_response_pb2 as cakelab_dot_arflow__grpc_dot_v1_dot_leave__session__response__pb2
from cakelab.arflow_grpc.v1 import list_sessions_request_pb2 as cakelab_dot_arflow__grpc_dot_v1_dot_list__sessions__request__pb2
from cakelab.arflow_grpc.v1 import list_sessions_response_pb2 as cakelab_dot_arflow__grpc_dot_v1_dot_list__sessions__response__pb2
from cakelab.arflow_grpc.v1 import save_ar_frames_request_pb2 as cakelab_dot_arflow__grpc_dot_v1_dot_save__ar__frames__request__pb2
from cakelab.arflow_grpc.v1 import save_ar_frames_response_pb2 as cakelab_dot_arflow__grpc_dot_v1_dot_save__ar__frames__response__pb2
from cakelab.arflow_grpc.v1 import save_synchronized_ar_frame_request_pb2 as cakelab_dot_arflow__grpc_dot_v1_dot_save__synchronized__ar__frame__request__pb2
from cakelab.arflow_grpc.v1 import save_synchronized_ar_frame_response_pb2 as cakelab_dot_arflow__grpc_dot_v1_dot_save__synchronized__ar__frame__response__pb2


class ARFlowServiceStub(object):
    """*
    ARFlowService provides a set of RPCs to manage AR sessions and save AR frames.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateSession = channel.unary_unary(
                '/cakelab.arflow_grpc.v1.ARFlowService/CreateSession',
                request_serializer=cakelab_dot_arflow__grpc_dot_v1_dot_create__session__request__pb2.CreateSessionRequest.SerializeToString,
                response_deserializer=cakelab_dot_arflow__grpc_dot_v1_dot_create__session__response__pb2.CreateSessionResponse.FromString,
                _registered_method=True)
        self.DeleteSession = channel.unary_unary(
                '/cakelab.arflow_grpc.v1.ARFlowService/DeleteSession',
                request_serializer=cakelab_dot_arflow__grpc_dot_v1_dot_delete__session__request__pb2.DeleteSessionRequest.SerializeToString,
                response_deserializer=cakelab_dot_arflow__grpc_dot_v1_dot_delete__session__response__pb2.DeleteSessionResponse.FromString,
                _registered_method=True)
        self.GetSession = channel.unary_unary(
                '/cakelab.arflow_grpc.v1.ARFlowService/GetSession',
                request_serializer=cakelab_dot_arflow__grpc_dot_v1_dot_get__session__request__pb2.GetSessionRequest.SerializeToString,
                response_deserializer=cakelab_dot_arflow__grpc_dot_v1_dot_get__session__response__pb2.GetSessionResponse.FromString,
                _registered_method=True)
        self.ListSessions = channel.unary_unary(
                '/cakelab.arflow_grpc.v1.ARFlowService/ListSessions',
                request_serializer=cakelab_dot_arflow__grpc_dot_v1_dot_list__sessions__request__pb2.ListSessionsRequest.SerializeToString,
                response_deserializer=cakelab_dot_arflow__grpc_dot_v1_dot_list__sessions__response__pb2.ListSessionsResponse.FromString,
                _registered_method=True)
        self.JoinSession = channel.unary_unary(
                '/cakelab.arflow_grpc.v1.ARFlowService/JoinSession',
                request_serializer=cakelab_dot_arflow__grpc_dot_v1_dot_join__session__request__pb2.JoinSessionRequest.SerializeToString,
                response_deserializer=cakelab_dot_arflow__grpc_dot_v1_dot_join__session__response__pb2.JoinSessionResponse.FromString,
                _registered_method=True)
        self.LeaveSession = channel.unary_unary(
                '/cakelab.arflow_grpc.v1.ARFlowService/LeaveSession',
                request_serializer=cakelab_dot_arflow__grpc_dot_v1_dot_leave__session__request__pb2.LeaveSessionRequest.SerializeToString,
                response_deserializer=cakelab_dot_arflow__grpc_dot_v1_dot_leave__session__response__pb2.LeaveSessionResponse.FromString,
                _registered_method=True)
        self.SaveARFrames = channel.unary_unary(
                '/cakelab.arflow_grpc.v1.ARFlowService/SaveARFrames',
                request_serializer=cakelab_dot_arflow__grpc_dot_v1_dot_save__ar__frames__request__pb2.SaveARFramesRequest.SerializeToString,
                response_deserializer=cakelab_dot_arflow__grpc_dot_v1_dot_save__ar__frames__response__pb2.SaveARFramesResponse.FromString,
                _registered_method=True)
        self.SaveSynchronizedARFrame = channel.unary_unary(
                '/cakelab.arflow_grpc.v1.ARFlowService/SaveSynchronizedARFrame',
                request_serializer=cakelab_dot_arflow__grpc_dot_v1_dot_save__synchronized__ar__frame__request__pb2.SaveSynchronizedARFrameRequest.SerializeToString,
                response_deserializer=cakelab_dot_arflow__grpc_dot_v1_dot_save__synchronized__ar__frame__response__pb2.SaveSynchronizedARFrameResponse.FromString,
                _registered_method=True)


class ARFlowServiceServicer(object):
    """*
    ARFlowService provides a set of RPCs to manage AR sessions and save AR frames.
    """

    def CreateSession(self, request, context):
        """/ Create a new session and bind it to a new recording stream.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSession(self, request, context):
        """/ Delete a session and disconnect from its associated recording stream.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSession(self, request, context):
        """/ Retrieve a session information.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSessions(self, request, context):
        """/ List all current sessions.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JoinSession(self, request, context):
        """/ Join a session.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LeaveSession(self, request, context):
        """/ Leave a session.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveARFrames(self, request, context):
        """/ Save AR frames from a device to its session's recording stream.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveSynchronizedARFrame(self, request, context):
        """/ Save an synchronized AR frame from a device to its session's recording stream.
        / This is our old approach and we're keeping this for benchmarking purposes.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ARFlowServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSession,
                    request_deserializer=cakelab_dot_arflow__grpc_dot_v1_dot_create__session__request__pb2.CreateSessionRequest.FromString,
                    response_serializer=cakelab_dot_arflow__grpc_dot_v1_dot_create__session__response__pb2.CreateSessionResponse.SerializeToString,
            ),
            'DeleteSession': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSession,
                    request_deserializer=cakelab_dot_arflow__grpc_dot_v1_dot_delete__session__request__pb2.DeleteSessionRequest.FromString,
                    response_serializer=cakelab_dot_arflow__grpc_dot_v1_dot_delete__session__response__pb2.DeleteSessionResponse.SerializeToString,
            ),
            'GetSession': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSession,
                    request_deserializer=cakelab_dot_arflow__grpc_dot_v1_dot_get__session__request__pb2.GetSessionRequest.FromString,
                    response_serializer=cakelab_dot_arflow__grpc_dot_v1_dot_get__session__response__pb2.GetSessionResponse.SerializeToString,
            ),
            'ListSessions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSessions,
                    request_deserializer=cakelab_dot_arflow__grpc_dot_v1_dot_list__sessions__request__pb2.ListSessionsRequest.FromString,
                    response_serializer=cakelab_dot_arflow__grpc_dot_v1_dot_list__sessions__response__pb2.ListSessionsResponse.SerializeToString,
            ),
            'JoinSession': grpc.unary_unary_rpc_method_handler(
                    servicer.JoinSession,
                    request_deserializer=cakelab_dot_arflow__grpc_dot_v1_dot_join__session__request__pb2.JoinSessionRequest.FromString,
                    response_serializer=cakelab_dot_arflow__grpc_dot_v1_dot_join__session__response__pb2.JoinSessionResponse.SerializeToString,
            ),
            'LeaveSession': grpc.unary_unary_rpc_method_handler(
                    servicer.LeaveSession,
                    request_deserializer=cakelab_dot_arflow__grpc_dot_v1_dot_leave__session__request__pb2.LeaveSessionRequest.FromString,
                    response_serializer=cakelab_dot_arflow__grpc_dot_v1_dot_leave__session__response__pb2.LeaveSessionResponse.SerializeToString,
            ),
            'SaveARFrames': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveARFrames,
                    request_deserializer=cakelab_dot_arflow__grpc_dot_v1_dot_save__ar__frames__request__pb2.SaveARFramesRequest.FromString,
                    response_serializer=cakelab_dot_arflow__grpc_dot_v1_dot_save__ar__frames__response__pb2.SaveARFramesResponse.SerializeToString,
            ),
            'SaveSynchronizedARFrame': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveSynchronizedARFrame,
                    request_deserializer=cakelab_dot_arflow__grpc_dot_v1_dot_save__synchronized__ar__frame__request__pb2.SaveSynchronizedARFrameRequest.FromString,
                    response_serializer=cakelab_dot_arflow__grpc_dot_v1_dot_save__synchronized__ar__frame__response__pb2.SaveSynchronizedARFrameResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cakelab.arflow_grpc.v1.ARFlowService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cakelab.arflow_grpc.v1.ARFlowService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ARFlowService(object):
    """*
    ARFlowService provides a set of RPCs to manage AR sessions and save AR frames.
    """

    @staticmethod
    def CreateSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cakelab.arflow_grpc.v1.ARFlowService/CreateSession',
            cakelab_dot_arflow__grpc_dot_v1_dot_create__session__request__pb2.CreateSessionRequest.SerializeToString,
            cakelab_dot_arflow__grpc_dot_v1_dot_create__session__response__pb2.CreateSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cakelab.arflow_grpc.v1.ARFlowService/DeleteSession',
            cakelab_dot_arflow__grpc_dot_v1_dot_delete__session__request__pb2.DeleteSessionRequest.SerializeToString,
            cakelab_dot_arflow__grpc_dot_v1_dot_delete__session__response__pb2.DeleteSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cakelab.arflow_grpc.v1.ARFlowService/GetSession',
            cakelab_dot_arflow__grpc_dot_v1_dot_get__session__request__pb2.GetSessionRequest.SerializeToString,
            cakelab_dot_arflow__grpc_dot_v1_dot_get__session__response__pb2.GetSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSessions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cakelab.arflow_grpc.v1.ARFlowService/ListSessions',
            cakelab_dot_arflow__grpc_dot_v1_dot_list__sessions__request__pb2.ListSessionsRequest.SerializeToString,
            cakelab_dot_arflow__grpc_dot_v1_dot_list__sessions__response__pb2.ListSessionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def JoinSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cakelab.arflow_grpc.v1.ARFlowService/JoinSession',
            cakelab_dot_arflow__grpc_dot_v1_dot_join__session__request__pb2.JoinSessionRequest.SerializeToString,
            cakelab_dot_arflow__grpc_dot_v1_dot_join__session__response__pb2.JoinSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LeaveSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cakelab.arflow_grpc.v1.ARFlowService/LeaveSession',
            cakelab_dot_arflow__grpc_dot_v1_dot_leave__session__request__pb2.LeaveSessionRequest.SerializeToString,
            cakelab_dot_arflow__grpc_dot_v1_dot_leave__session__response__pb2.LeaveSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SaveARFrames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cakelab.arflow_grpc.v1.ARFlowService/SaveARFrames',
            cakelab_dot_arflow__grpc_dot_v1_dot_save__ar__frames__request__pb2.SaveARFramesRequest.SerializeToString,
            cakelab_dot_arflow__grpc_dot_v1_dot_save__ar__frames__response__pb2.SaveARFramesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SaveSynchronizedARFrame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cakelab.arflow_grpc.v1.ARFlowService/SaveSynchronizedARFrame',
            cakelab_dot_arflow__grpc_dot_v1_dot_save__synchronized__ar__frame__request__pb2.SaveSynchronizedARFrameRequest.SerializeToString,
            cakelab_dot_arflow__grpc_dot_v1_dot_save__synchronized__ar__frame__response__pb2.SaveSynchronizedARFrameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
