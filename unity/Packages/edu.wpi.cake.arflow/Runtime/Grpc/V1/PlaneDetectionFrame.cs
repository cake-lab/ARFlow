// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: cakelab/arflow_grpc/v1/plane_detection_frame.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CakeLab.ARFlow.Grpc.V1 {

  /// <summary>Holder for reflection information generated from cakelab/arflow_grpc/v1/plane_detection_frame.proto</summary>
  public static partial class PlaneDetectionFrameReflection {

    #region Descriptor
    /// <summary>File descriptor for cakelab/arflow_grpc/v1/plane_detection_frame.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlaneDetectionFrameReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjJjYWtlbGFiL2FyZmxvd19ncnBjL3YxL3BsYW5lX2RldGVjdGlvbl9mcmFt",
            "ZS5wcm90bxIWY2FrZWxhYi5hcmZsb3dfZ3JwYy52MRolY2FrZWxhYi9hcmZs",
            "b3dfZ3JwYy92MS9hcl9wbGFuZS5wcm90bxofZ29vZ2xlL3Byb3RvYnVmL3Rp",
            "bWVzdGFtcC5wcm90byKzAgoTUGxhbmVEZXRlY3Rpb25GcmFtZRJHCgVzdGF0",
            "ZRgBIAEoDjIxLmNha2VsYWIuYXJmbG93X2dycGMudjEuUGxhbmVEZXRlY3Rp",
            "b25GcmFtZS5TdGF0ZVIFc3RhdGUSRQoQZGV2aWNlX3RpbWVzdGFtcBgCIAEo",
            "CzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBSD2RldmljZVRpbWVzdGFt",
            "cBI1CgVwbGFuZRgDIAEoCzIfLmNha2VsYWIuYXJmbG93X2dycGMudjEuQVJQ",
            "bGFuZVIFcGxhbmUiVQoFU3RhdGUSFQoRU1RBVEVfVU5TUEVDSUZJRUQQABIP",
            "CgtTVEFURV9BRERFRBABEhEKDVNUQVRFX1VQREFURUQQAhIRCg1TVEFURV9S",
            "RU1PVkVEEANCrQEKGmNvbS5jYWtlbGFiLmFyZmxvd19ncnBjLnYxQhhQbGFu",
            "ZURldGVjdGlvbkZyYW1lUHJvdG9QAaICA0NBWKoCFkNha2VMYWIuQVJGbG93",
            "LkdycGMuVjHKAhVDYWtlbGFiXEFyZmxvd0dycGNcVjHiAiFDYWtlbGFiXEFy",
            "Zmxvd0dycGNcVjFcR1BCTWV0YWRhdGHqAhdDYWtlbGFiOjpBcmZsb3dHcnBj",
            "OjpWMWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::CakeLab.ARFlow.Grpc.V1.ArPlaneReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CakeLab.ARFlow.Grpc.V1.PlaneDetectionFrame), global::CakeLab.ARFlow.Grpc.V1.PlaneDetectionFrame.Parser, new[]{ "State", "DeviceTimestamp", "Plane" }, null, new[]{ typeof(global::CakeLab.ARFlow.Grpc.V1.PlaneDetectionFrame.Types.State) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class PlaneDetectionFrame : pb::IMessage<PlaneDetectionFrame>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlaneDetectionFrame> _parser = new pb::MessageParser<PlaneDetectionFrame>(() => new PlaneDetectionFrame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PlaneDetectionFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CakeLab.ARFlow.Grpc.V1.PlaneDetectionFrameReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlaneDetectionFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlaneDetectionFrame(PlaneDetectionFrame other) : this() {
      state_ = other.state_;
      deviceTimestamp_ = other.deviceTimestamp_ != null ? other.deviceTimestamp_.Clone() : null;
      plane_ = other.plane_ != null ? other.plane_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlaneDetectionFrame Clone() {
      return new PlaneDetectionFrame(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::CakeLab.ARFlow.Grpc.V1.PlaneDetectionFrame.Types.State state_ = global::CakeLab.ARFlow.Grpc.V1.PlaneDetectionFrame.Types.State.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::CakeLab.ARFlow.Grpc.V1.PlaneDetectionFrame.Types.State State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "device_timestamp" field.</summary>
    public const int DeviceTimestampFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp deviceTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp DeviceTimestamp {
      get { return deviceTimestamp_; }
      set {
        deviceTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "plane" field.</summary>
    public const int PlaneFieldNumber = 3;
    private global::CakeLab.ARFlow.Grpc.V1.ARPlane plane_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::CakeLab.ARFlow.Grpc.V1.ARPlane Plane {
      get { return plane_; }
      set {
        plane_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PlaneDetectionFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PlaneDetectionFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (!object.Equals(DeviceTimestamp, other.DeviceTimestamp)) return false;
      if (!object.Equals(Plane, other.Plane)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (State != global::CakeLab.ARFlow.Grpc.V1.PlaneDetectionFrame.Types.State.Unspecified) hash ^= State.GetHashCode();
      if (deviceTimestamp_ != null) hash ^= DeviceTimestamp.GetHashCode();
      if (plane_ != null) hash ^= Plane.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (State != global::CakeLab.ARFlow.Grpc.V1.PlaneDetectionFrame.Types.State.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if (deviceTimestamp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DeviceTimestamp);
      }
      if (plane_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Plane);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (State != global::CakeLab.ARFlow.Grpc.V1.PlaneDetectionFrame.Types.State.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if (deviceTimestamp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DeviceTimestamp);
      }
      if (plane_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Plane);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (State != global::CakeLab.ARFlow.Grpc.V1.PlaneDetectionFrame.Types.State.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (deviceTimestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceTimestamp);
      }
      if (plane_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Plane);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PlaneDetectionFrame other) {
      if (other == null) {
        return;
      }
      if (other.State != global::CakeLab.ARFlow.Grpc.V1.PlaneDetectionFrame.Types.State.Unspecified) {
        State = other.State;
      }
      if (other.deviceTimestamp_ != null) {
        if (deviceTimestamp_ == null) {
          DeviceTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        DeviceTimestamp.MergeFrom(other.DeviceTimestamp);
      }
      if (other.plane_ != null) {
        if (plane_ == null) {
          Plane = new global::CakeLab.ARFlow.Grpc.V1.ARPlane();
        }
        Plane.MergeFrom(other.Plane);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            State = (global::CakeLab.ARFlow.Grpc.V1.PlaneDetectionFrame.Types.State) input.ReadEnum();
            break;
          }
          case 18: {
            if (deviceTimestamp_ == null) {
              DeviceTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(DeviceTimestamp);
            break;
          }
          case 26: {
            if (plane_ == null) {
              Plane = new global::CakeLab.ARFlow.Grpc.V1.ARPlane();
            }
            input.ReadMessage(Plane);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            State = (global::CakeLab.ARFlow.Grpc.V1.PlaneDetectionFrame.Types.State) input.ReadEnum();
            break;
          }
          case 18: {
            if (deviceTimestamp_ == null) {
              DeviceTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(DeviceTimestamp);
            break;
          }
          case 26: {
            if (plane_ == null) {
              Plane = new global::CakeLab.ARFlow.Grpc.V1.ARPlane();
            }
            input.ReadMessage(Plane);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the PlaneDetectionFrame message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum State {
        [pbr::OriginalName("STATE_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("STATE_ADDED")] Added = 1,
        [pbr::OriginalName("STATE_UPDATED")] Updated = 2,
        [pbr::OriginalName("STATE_REMOVED")] Removed = 3,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
