// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: cakelab/arflow_grpc/v1/arflow_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace CakeLab.ARFlow.Grpc.V1 {
  /// <summary>
  ///*
  /// ARFlowService provides a set of RPCs to manage AR sessions and save AR frames.
  /// </summary>
  public static partial class ARFlowService
  {
    static readonly string __ServiceName = "cakelab.arflow_grpc.v1.ARFlowService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::CakeLab.ARFlow.Grpc.V1.CreateSessionRequest> __Marshaller_cakelab_arflow_grpc_v1_CreateSessionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CakeLab.ARFlow.Grpc.V1.CreateSessionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::CakeLab.ARFlow.Grpc.V1.CreateSessionResponse> __Marshaller_cakelab_arflow_grpc_v1_CreateSessionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CakeLab.ARFlow.Grpc.V1.CreateSessionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::CakeLab.ARFlow.Grpc.V1.DeleteSessionRequest> __Marshaller_cakelab_arflow_grpc_v1_DeleteSessionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CakeLab.ARFlow.Grpc.V1.DeleteSessionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::CakeLab.ARFlow.Grpc.V1.DeleteSessionResponse> __Marshaller_cakelab_arflow_grpc_v1_DeleteSessionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CakeLab.ARFlow.Grpc.V1.DeleteSessionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::CakeLab.ARFlow.Grpc.V1.GetSessionRequest> __Marshaller_cakelab_arflow_grpc_v1_GetSessionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CakeLab.ARFlow.Grpc.V1.GetSessionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::CakeLab.ARFlow.Grpc.V1.GetSessionResponse> __Marshaller_cakelab_arflow_grpc_v1_GetSessionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CakeLab.ARFlow.Grpc.V1.GetSessionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::CakeLab.ARFlow.Grpc.V1.ListSessionsRequest> __Marshaller_cakelab_arflow_grpc_v1_ListSessionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CakeLab.ARFlow.Grpc.V1.ListSessionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::CakeLab.ARFlow.Grpc.V1.ListSessionsResponse> __Marshaller_cakelab_arflow_grpc_v1_ListSessionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CakeLab.ARFlow.Grpc.V1.ListSessionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::CakeLab.ARFlow.Grpc.V1.JoinSessionRequest> __Marshaller_cakelab_arflow_grpc_v1_JoinSessionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CakeLab.ARFlow.Grpc.V1.JoinSessionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::CakeLab.ARFlow.Grpc.V1.JoinSessionResponse> __Marshaller_cakelab_arflow_grpc_v1_JoinSessionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CakeLab.ARFlow.Grpc.V1.JoinSessionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::CakeLab.ARFlow.Grpc.V1.LeaveSessionRequest> __Marshaller_cakelab_arflow_grpc_v1_LeaveSessionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CakeLab.ARFlow.Grpc.V1.LeaveSessionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::CakeLab.ARFlow.Grpc.V1.LeaveSessionResponse> __Marshaller_cakelab_arflow_grpc_v1_LeaveSessionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CakeLab.ARFlow.Grpc.V1.LeaveSessionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::CakeLab.ARFlow.Grpc.V1.SaveARFramesRequest> __Marshaller_cakelab_arflow_grpc_v1_SaveARFramesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CakeLab.ARFlow.Grpc.V1.SaveARFramesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::CakeLab.ARFlow.Grpc.V1.SaveARFramesResponse> __Marshaller_cakelab_arflow_grpc_v1_SaveARFramesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CakeLab.ARFlow.Grpc.V1.SaveARFramesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::CakeLab.ARFlow.Grpc.V1.SaveSynchronizedARFrameRequest> __Marshaller_cakelab_arflow_grpc_v1_SaveSynchronizedARFrameRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CakeLab.ARFlow.Grpc.V1.SaveSynchronizedARFrameRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::CakeLab.ARFlow.Grpc.V1.SaveSynchronizedARFrameResponse> __Marshaller_cakelab_arflow_grpc_v1_SaveSynchronizedARFrameResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CakeLab.ARFlow.Grpc.V1.SaveSynchronizedARFrameResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::CakeLab.ARFlow.Grpc.V1.CreateSessionRequest, global::CakeLab.ARFlow.Grpc.V1.CreateSessionResponse> __Method_CreateSession = new grpc::Method<global::CakeLab.ARFlow.Grpc.V1.CreateSessionRequest, global::CakeLab.ARFlow.Grpc.V1.CreateSessionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateSession",
        __Marshaller_cakelab_arflow_grpc_v1_CreateSessionRequest,
        __Marshaller_cakelab_arflow_grpc_v1_CreateSessionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::CakeLab.ARFlow.Grpc.V1.DeleteSessionRequest, global::CakeLab.ARFlow.Grpc.V1.DeleteSessionResponse> __Method_DeleteSession = new grpc::Method<global::CakeLab.ARFlow.Grpc.V1.DeleteSessionRequest, global::CakeLab.ARFlow.Grpc.V1.DeleteSessionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteSession",
        __Marshaller_cakelab_arflow_grpc_v1_DeleteSessionRequest,
        __Marshaller_cakelab_arflow_grpc_v1_DeleteSessionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::CakeLab.ARFlow.Grpc.V1.GetSessionRequest, global::CakeLab.ARFlow.Grpc.V1.GetSessionResponse> __Method_GetSession = new grpc::Method<global::CakeLab.ARFlow.Grpc.V1.GetSessionRequest, global::CakeLab.ARFlow.Grpc.V1.GetSessionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSession",
        __Marshaller_cakelab_arflow_grpc_v1_GetSessionRequest,
        __Marshaller_cakelab_arflow_grpc_v1_GetSessionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::CakeLab.ARFlow.Grpc.V1.ListSessionsRequest, global::CakeLab.ARFlow.Grpc.V1.ListSessionsResponse> __Method_ListSessions = new grpc::Method<global::CakeLab.ARFlow.Grpc.V1.ListSessionsRequest, global::CakeLab.ARFlow.Grpc.V1.ListSessionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListSessions",
        __Marshaller_cakelab_arflow_grpc_v1_ListSessionsRequest,
        __Marshaller_cakelab_arflow_grpc_v1_ListSessionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::CakeLab.ARFlow.Grpc.V1.JoinSessionRequest, global::CakeLab.ARFlow.Grpc.V1.JoinSessionResponse> __Method_JoinSession = new grpc::Method<global::CakeLab.ARFlow.Grpc.V1.JoinSessionRequest, global::CakeLab.ARFlow.Grpc.V1.JoinSessionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "JoinSession",
        __Marshaller_cakelab_arflow_grpc_v1_JoinSessionRequest,
        __Marshaller_cakelab_arflow_grpc_v1_JoinSessionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::CakeLab.ARFlow.Grpc.V1.LeaveSessionRequest, global::CakeLab.ARFlow.Grpc.V1.LeaveSessionResponse> __Method_LeaveSession = new grpc::Method<global::CakeLab.ARFlow.Grpc.V1.LeaveSessionRequest, global::CakeLab.ARFlow.Grpc.V1.LeaveSessionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LeaveSession",
        __Marshaller_cakelab_arflow_grpc_v1_LeaveSessionRequest,
        __Marshaller_cakelab_arflow_grpc_v1_LeaveSessionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::CakeLab.ARFlow.Grpc.V1.SaveARFramesRequest, global::CakeLab.ARFlow.Grpc.V1.SaveARFramesResponse> __Method_SaveARFrames = new grpc::Method<global::CakeLab.ARFlow.Grpc.V1.SaveARFramesRequest, global::CakeLab.ARFlow.Grpc.V1.SaveARFramesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SaveARFrames",
        __Marshaller_cakelab_arflow_grpc_v1_SaveARFramesRequest,
        __Marshaller_cakelab_arflow_grpc_v1_SaveARFramesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::CakeLab.ARFlow.Grpc.V1.SaveSynchronizedARFrameRequest, global::CakeLab.ARFlow.Grpc.V1.SaveSynchronizedARFrameResponse> __Method_SaveSynchronizedARFrame = new grpc::Method<global::CakeLab.ARFlow.Grpc.V1.SaveSynchronizedARFrameRequest, global::CakeLab.ARFlow.Grpc.V1.SaveSynchronizedARFrameResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SaveSynchronizedARFrame",
        __Marshaller_cakelab_arflow_grpc_v1_SaveSynchronizedARFrameRequest,
        __Marshaller_cakelab_arflow_grpc_v1_SaveSynchronizedARFrameResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::CakeLab.ARFlow.Grpc.V1.ArflowServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ARFlowService</summary>
    [grpc::BindServiceMethod(typeof(ARFlowService), "BindService")]
    public abstract partial class ARFlowServiceBase
    {
      /// <summary>
      ///&#x2F; Create a new session and bind it to a new recording stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::CakeLab.ARFlow.Grpc.V1.CreateSessionResponse> CreateSession(global::CakeLab.ARFlow.Grpc.V1.CreateSessionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///&#x2F; Delete a session and disconnect from its associated recording stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::CakeLab.ARFlow.Grpc.V1.DeleteSessionResponse> DeleteSession(global::CakeLab.ARFlow.Grpc.V1.DeleteSessionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///&#x2F; Retrieve a session information.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::CakeLab.ARFlow.Grpc.V1.GetSessionResponse> GetSession(global::CakeLab.ARFlow.Grpc.V1.GetSessionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///&#x2F; List all current sessions.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::CakeLab.ARFlow.Grpc.V1.ListSessionsResponse> ListSessions(global::CakeLab.ARFlow.Grpc.V1.ListSessionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///&#x2F; Join a session.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::CakeLab.ARFlow.Grpc.V1.JoinSessionResponse> JoinSession(global::CakeLab.ARFlow.Grpc.V1.JoinSessionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///&#x2F; Leave a session.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::CakeLab.ARFlow.Grpc.V1.LeaveSessionResponse> LeaveSession(global::CakeLab.ARFlow.Grpc.V1.LeaveSessionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///&#x2F; Save AR frames from a device to its session's recording stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::CakeLab.ARFlow.Grpc.V1.SaveARFramesResponse> SaveARFrames(global::CakeLab.ARFlow.Grpc.V1.SaveARFramesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///&#x2F; Save an synchronized AR frame from a device to its session's recording stream.
      ///&#x2F; This is our old approach and we're keeping this for benchmarking purposes.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::CakeLab.ARFlow.Grpc.V1.SaveSynchronizedARFrameResponse> SaveSynchronizedARFrame(global::CakeLab.ARFlow.Grpc.V1.SaveSynchronizedARFrameRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ARFlowService</summary>
    public partial class ARFlowServiceClient : grpc::ClientBase<ARFlowServiceClient>
    {
      /// <summary>Creates a new client for ARFlowService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ARFlowServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ARFlowService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ARFlowServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ARFlowServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ARFlowServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///&#x2F; Create a new session and bind it to a new recording stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::CakeLab.ARFlow.Grpc.V1.CreateSessionResponse CreateSession(global::CakeLab.ARFlow.Grpc.V1.CreateSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; Create a new session and bind it to a new recording stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::CakeLab.ARFlow.Grpc.V1.CreateSessionResponse CreateSession(global::CakeLab.ARFlow.Grpc.V1.CreateSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateSession, null, options, request);
      }
      /// <summary>
      ///&#x2F; Create a new session and bind it to a new recording stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::CakeLab.ARFlow.Grpc.V1.CreateSessionResponse> CreateSessionAsync(global::CakeLab.ARFlow.Grpc.V1.CreateSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; Create a new session and bind it to a new recording stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::CakeLab.ARFlow.Grpc.V1.CreateSessionResponse> CreateSessionAsync(global::CakeLab.ARFlow.Grpc.V1.CreateSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateSession, null, options, request);
      }
      /// <summary>
      ///&#x2F; Delete a session and disconnect from its associated recording stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::CakeLab.ARFlow.Grpc.V1.DeleteSessionResponse DeleteSession(global::CakeLab.ARFlow.Grpc.V1.DeleteSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; Delete a session and disconnect from its associated recording stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::CakeLab.ARFlow.Grpc.V1.DeleteSessionResponse DeleteSession(global::CakeLab.ARFlow.Grpc.V1.DeleteSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteSession, null, options, request);
      }
      /// <summary>
      ///&#x2F; Delete a session and disconnect from its associated recording stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::CakeLab.ARFlow.Grpc.V1.DeleteSessionResponse> DeleteSessionAsync(global::CakeLab.ARFlow.Grpc.V1.DeleteSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; Delete a session and disconnect from its associated recording stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::CakeLab.ARFlow.Grpc.V1.DeleteSessionResponse> DeleteSessionAsync(global::CakeLab.ARFlow.Grpc.V1.DeleteSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteSession, null, options, request);
      }
      /// <summary>
      ///&#x2F; Retrieve a session information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::CakeLab.ARFlow.Grpc.V1.GetSessionResponse GetSession(global::CakeLab.ARFlow.Grpc.V1.GetSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; Retrieve a session information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::CakeLab.ARFlow.Grpc.V1.GetSessionResponse GetSession(global::CakeLab.ARFlow.Grpc.V1.GetSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSession, null, options, request);
      }
      /// <summary>
      ///&#x2F; Retrieve a session information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::CakeLab.ARFlow.Grpc.V1.GetSessionResponse> GetSessionAsync(global::CakeLab.ARFlow.Grpc.V1.GetSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; Retrieve a session information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::CakeLab.ARFlow.Grpc.V1.GetSessionResponse> GetSessionAsync(global::CakeLab.ARFlow.Grpc.V1.GetSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSession, null, options, request);
      }
      /// <summary>
      ///&#x2F; List all current sessions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::CakeLab.ARFlow.Grpc.V1.ListSessionsResponse ListSessions(global::CakeLab.ARFlow.Grpc.V1.ListSessionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSessions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; List all current sessions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::CakeLab.ARFlow.Grpc.V1.ListSessionsResponse ListSessions(global::CakeLab.ARFlow.Grpc.V1.ListSessionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSessions, null, options, request);
      }
      /// <summary>
      ///&#x2F; List all current sessions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::CakeLab.ARFlow.Grpc.V1.ListSessionsResponse> ListSessionsAsync(global::CakeLab.ARFlow.Grpc.V1.ListSessionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSessionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; List all current sessions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::CakeLab.ARFlow.Grpc.V1.ListSessionsResponse> ListSessionsAsync(global::CakeLab.ARFlow.Grpc.V1.ListSessionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSessions, null, options, request);
      }
      /// <summary>
      ///&#x2F; Join a session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::CakeLab.ARFlow.Grpc.V1.JoinSessionResponse JoinSession(global::CakeLab.ARFlow.Grpc.V1.JoinSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return JoinSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; Join a session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::CakeLab.ARFlow.Grpc.V1.JoinSessionResponse JoinSession(global::CakeLab.ARFlow.Grpc.V1.JoinSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_JoinSession, null, options, request);
      }
      /// <summary>
      ///&#x2F; Join a session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::CakeLab.ARFlow.Grpc.V1.JoinSessionResponse> JoinSessionAsync(global::CakeLab.ARFlow.Grpc.V1.JoinSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return JoinSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; Join a session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::CakeLab.ARFlow.Grpc.V1.JoinSessionResponse> JoinSessionAsync(global::CakeLab.ARFlow.Grpc.V1.JoinSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_JoinSession, null, options, request);
      }
      /// <summary>
      ///&#x2F; Leave a session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::CakeLab.ARFlow.Grpc.V1.LeaveSessionResponse LeaveSession(global::CakeLab.ARFlow.Grpc.V1.LeaveSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LeaveSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; Leave a session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::CakeLab.ARFlow.Grpc.V1.LeaveSessionResponse LeaveSession(global::CakeLab.ARFlow.Grpc.V1.LeaveSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LeaveSession, null, options, request);
      }
      /// <summary>
      ///&#x2F; Leave a session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::CakeLab.ARFlow.Grpc.V1.LeaveSessionResponse> LeaveSessionAsync(global::CakeLab.ARFlow.Grpc.V1.LeaveSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LeaveSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; Leave a session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::CakeLab.ARFlow.Grpc.V1.LeaveSessionResponse> LeaveSessionAsync(global::CakeLab.ARFlow.Grpc.V1.LeaveSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LeaveSession, null, options, request);
      }
      /// <summary>
      ///&#x2F; Save AR frames from a device to its session's recording stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::CakeLab.ARFlow.Grpc.V1.SaveARFramesResponse SaveARFrames(global::CakeLab.ARFlow.Grpc.V1.SaveARFramesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SaveARFrames(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; Save AR frames from a device to its session's recording stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::CakeLab.ARFlow.Grpc.V1.SaveARFramesResponse SaveARFrames(global::CakeLab.ARFlow.Grpc.V1.SaveARFramesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SaveARFrames, null, options, request);
      }
      /// <summary>
      ///&#x2F; Save AR frames from a device to its session's recording stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::CakeLab.ARFlow.Grpc.V1.SaveARFramesResponse> SaveARFramesAsync(global::CakeLab.ARFlow.Grpc.V1.SaveARFramesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SaveARFramesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; Save AR frames from a device to its session's recording stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::CakeLab.ARFlow.Grpc.V1.SaveARFramesResponse> SaveARFramesAsync(global::CakeLab.ARFlow.Grpc.V1.SaveARFramesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SaveARFrames, null, options, request);
      }
      /// <summary>
      ///&#x2F; Save an synchronized AR frame from a device to its session's recording stream.
      ///&#x2F; This is our old approach and we're keeping this for benchmarking purposes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::CakeLab.ARFlow.Grpc.V1.SaveSynchronizedARFrameResponse SaveSynchronizedARFrame(global::CakeLab.ARFlow.Grpc.V1.SaveSynchronizedARFrameRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SaveSynchronizedARFrame(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; Save an synchronized AR frame from a device to its session's recording stream.
      ///&#x2F; This is our old approach and we're keeping this for benchmarking purposes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::CakeLab.ARFlow.Grpc.V1.SaveSynchronizedARFrameResponse SaveSynchronizedARFrame(global::CakeLab.ARFlow.Grpc.V1.SaveSynchronizedARFrameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SaveSynchronizedARFrame, null, options, request);
      }
      /// <summary>
      ///&#x2F; Save an synchronized AR frame from a device to its session's recording stream.
      ///&#x2F; This is our old approach and we're keeping this for benchmarking purposes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::CakeLab.ARFlow.Grpc.V1.SaveSynchronizedARFrameResponse> SaveSynchronizedARFrameAsync(global::CakeLab.ARFlow.Grpc.V1.SaveSynchronizedARFrameRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SaveSynchronizedARFrameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///&#x2F; Save an synchronized AR frame from a device to its session's recording stream.
      ///&#x2F; This is our old approach and we're keeping this for benchmarking purposes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::CakeLab.ARFlow.Grpc.V1.SaveSynchronizedARFrameResponse> SaveSynchronizedARFrameAsync(global::CakeLab.ARFlow.Grpc.V1.SaveSynchronizedARFrameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SaveSynchronizedARFrame, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ARFlowServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ARFlowServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(ARFlowServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateSession, serviceImpl.CreateSession)
          .AddMethod(__Method_DeleteSession, serviceImpl.DeleteSession)
          .AddMethod(__Method_GetSession, serviceImpl.GetSession)
          .AddMethod(__Method_ListSessions, serviceImpl.ListSessions)
          .AddMethod(__Method_JoinSession, serviceImpl.JoinSession)
          .AddMethod(__Method_LeaveSession, serviceImpl.LeaveSession)
          .AddMethod(__Method_SaveARFrames, serviceImpl.SaveARFrames)
          .AddMethod(__Method_SaveSynchronizedARFrame, serviceImpl.SaveSynchronizedARFrame).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ARFlowServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateSession, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CakeLab.ARFlow.Grpc.V1.CreateSessionRequest, global::CakeLab.ARFlow.Grpc.V1.CreateSessionResponse>(serviceImpl.CreateSession));
      serviceBinder.AddMethod(__Method_DeleteSession, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CakeLab.ARFlow.Grpc.V1.DeleteSessionRequest, global::CakeLab.ARFlow.Grpc.V1.DeleteSessionResponse>(serviceImpl.DeleteSession));
      serviceBinder.AddMethod(__Method_GetSession, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CakeLab.ARFlow.Grpc.V1.GetSessionRequest, global::CakeLab.ARFlow.Grpc.V1.GetSessionResponse>(serviceImpl.GetSession));
      serviceBinder.AddMethod(__Method_ListSessions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CakeLab.ARFlow.Grpc.V1.ListSessionsRequest, global::CakeLab.ARFlow.Grpc.V1.ListSessionsResponse>(serviceImpl.ListSessions));
      serviceBinder.AddMethod(__Method_JoinSession, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CakeLab.ARFlow.Grpc.V1.JoinSessionRequest, global::CakeLab.ARFlow.Grpc.V1.JoinSessionResponse>(serviceImpl.JoinSession));
      serviceBinder.AddMethod(__Method_LeaveSession, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CakeLab.ARFlow.Grpc.V1.LeaveSessionRequest, global::CakeLab.ARFlow.Grpc.V1.LeaveSessionResponse>(serviceImpl.LeaveSession));
      serviceBinder.AddMethod(__Method_SaveARFrames, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CakeLab.ARFlow.Grpc.V1.SaveARFramesRequest, global::CakeLab.ARFlow.Grpc.V1.SaveARFramesResponse>(serviceImpl.SaveARFrames));
      serviceBinder.AddMethod(__Method_SaveSynchronizedARFrame, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CakeLab.ARFlow.Grpc.V1.SaveSynchronizedARFrameRequest, global::CakeLab.ARFlow.Grpc.V1.SaveSynchronizedARFrameResponse>(serviceImpl.SaveSynchronizedARFrame));
    }

  }
}
#endregion
