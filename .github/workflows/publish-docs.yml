name: Publish docs

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  workflow_call:

permissions:
  pages: write
  id-token: write

jobs:
  build-protos-docs:
    name: Build protos docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Buf CLI
        uses: bufbuild/buf-setup-action@v1.47.2 # must match mise.toml
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install protoc
        uses: arduino/setup-protoc@v1

      - name: Build protos docs
        run: buf generate

      - uses: actions/upload-artifact@v4
        with:
          name: protos-docs
          path: ./website/docs/protos

  build-client-docs:
    name: Build client docs
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Dotnet Setup
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.x

      - name: Update docfx
        run: dotnet tool update -g docfx

      - name: Run script to build the documentation
        working-directory: ./unity/Documentation
        run: ./scripts/build.cmd

      - uses: actions/upload-artifact@v4
        with:
          name: client-docs
          path: ./website/docs/client

  build-server-docs:
    name: Build server docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Python
        id: install_python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: "1.8.4"

      - name: Setup a local virtual environment (if no poetry.toml file)
        working-directory: ./python
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local

      - name: Restore cached virtualenv
        uses: actions/cache/restore@v4
        with:
          path: ./python/.venv
          key:
            venv-${{ runner.os }}-${{
            steps.install_python.outputs.python-version }}-${{
            hashFiles('./python/poetry.lock') }}

      - name: Install docs dependencies
        working-directory: ./python
        run: |
          poetry install --with docs
          echo "$(poetry env info --path)/bin" >> $GITHUB_PATH
          echo "VIRTUAL_ENV=$(poetry env info --path)/bin" >> $GITHUB_ENV

      - name: Build the documentation
        working-directory: ./python
        run: python tools/make_docs_cli.py

      - uses: actions/upload-artifact@v4
        with:
          name: server-docs
          path: ./website/docs/server

  upload-website:
    name: Upload website
    needs: [build-protos-docs, build-client-docs, build-server-docs]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: protos-docs
          path: ./website/docs/protos

      - uses: actions/download-artifact@v4
        with:
          name: client-docs
          path: ./website/docs/client

      - uses: actions/download-artifact@v4
        with:
          name: server-docs
          path: ./website/docs/server

      - uses: actions/upload-pages-artifact@v3
        with:
          path: ./website

  # Single deploy job since we're just deploying
  deploy-website:
    name: Deploy website
    needs: upload-website
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
